{title [Compile]}
{css-src common.css, ucs cfr, global []}
{global, orbit heading, h2 []}
['STDN can be compiled to html. To be exact, a stdn will be compiled to a '{href https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment, a [document fragment]}.]
[]
This article is for explaining the compile of stdn. Compiled results are illustrated by html in this article.
[]
['All the source code of compile is in '{href https://github.com/st-org/stc/blob/main/src/compiler.ts, a [compiler.ts]}.]
[]
{h2 [Line]}
Each line will be compiled to a div with "st-line" class.
[]
{class hide, div [
    first line
    ['second '{span [line]}]
]}
{two [
    {display [Source]}
    {display [Result]}
    {lang stdn, code [
        first line
        '[\'second \'{span [line]}]'
    ]}
    {lang html, block, code [<div class="st-line">first line</div><div class="st-line">second <span class="unit span" id="line~2">line</span></div>]}
]}
[]
{h2 [Unit]}
['Each unit will be compiled to a html element or svg element. If the unit is a '{src global.stdn#global-tag-unit, a [global tag unit]}' or '{src global.stdn#global-option-units, a [global option unit]}', then it will be compiled to an empty div. If there is a corresponding unit compiler of the real tag, then the unit will be compiled using the unit compiler. If the tag is in the supported list in '{src html.stdn#supported-html-elements, a [html.stdn]}', then the unit will be compiled to a corresponding html element. If the tag is in the supported list in '{src svg.stdn#supported-svg-elements-and-attributes, a [svg.stdn]}', then the unit will be compiled to a corresponding svg element. Otherwise, the unit will be compiled to a div. Here, real tag is recursively determined by non-empty global "compile-with" option which is precisely showed in the following code.']
[]
{lang js, code [
    'function getRealTag(tag){'
    '    let realTag=tagToRealTag[tag]'
    '    if(realTag!==undefined){'
    '        return realTag'
    '    }'
    '    tagToRealTag[tag]=tag'
    '    const value=getLastGlobalOption(\'compile-with\',tag,tagToGlobalOptions)'
    '    if(typeof value!==\'string\'||value.length===0||value===tag){'
    '        return tag'
    '    }'
    '    return tagToRealTag[tag]=getRealTag(value)'
    '}'
]}
[]
['Built-in unit compilers can be found via '{href https://github.com/st-org/st-std/blob/main/src/ucs.ts, a [ucs.ts]}. You can import other unit compilers using global tag units.]
[]
'Class list of the compiled result will contain "unit", the tag and class names in "class" option.'
[]
'If the unit is not a global tag unit or global option unit, then the compiled result will have id which is from string value "id" option or the first line of the unit. The precise process is showed in the following code.'
[]
{lang js, code [
    'function stringToId(string){'
    '    return string.replace(/[^\s\w-]/g,\'\').toLowerCase().trim().split(/[\s_-]+/).join(\'-\')'
    '}'
    'const baseId=stringToId(typeof unit.options.id===\'string\'?unit.options.id:unitToInlinePlainString(unit))'
    'const count=baseIdToCount[baseId]=(baseIdToCount[baseId]??0)+1'
    'const id=count>1||baseId.length===0?`${baseId}~${count}`:baseId'
]}
[]
['General non-stdn value options will be added to the compiled result if the corresponding attribute is not set by unit compiler. The corresponding attribute will have "data-" prefix if the option is not in the supported list in '{src html.stdn#supported-html-attributes, a [html.stdn]}' and the supported list in '{src svg.stdn#supported-svg-elements-and-attributes, a [svg.stdn]}.]
[]
{class hide, div [{src https://st-org.github.io/imgs/st.png, img []}]}
{two [
    {display [Source]}
    {display [Result]}
    {lang stdn, block, code ['{src https://st-org.github.io/imgs/st.png, img []}']}
    {lang html, block, code [<div class="st-line"><img class="unit img" id="~2" src="https://st-org.github.io/imgs/st.png"></div>]}
]}
[]
{h2 [Index]}
'If a unit is not a global tag unit or global option unit, then an index will be given according to the orbit and the level of the unit.'
[]
'To be exact, orbit is determined successively by non-empty orbit option or non-empty global orbit option of the tag or the tag, and level is by non-empty level option or non-empty global level option of the tag or non-empty global level option of the real orbit or 1. Here, real orbit is recursively determined by non-empty global "merge-into" option. The precise process is showed in the following code.'
[]
{lang js, code [
    'function getRealOrbit(orbit){'
    '    let realOrbit=orbitToRealOrbit[orbit]'
    '    if(realOrbit!==undefined){'
    '        return realOrbit'
    '    }'
    '    orbitToRealOrbit[orbit]=orbit'
    '    const value=getLastGlobalOption(\'merge-into\',orbit,tagToGlobalOptions)'
    '    if(typeof value!==\'string\'||value.length===0||value===orbit){'
    '        return orbit'
    '    }'
    '    return orbitToRealOrbit[orbit]=getRealOrbit(value)'
    '}'
    let orbit=unit.options.orbit
    '    ??getLastGlobalOption(\'orbit\',unit.tag,tagToGlobalOptions)'
    'if(typeof orbit!==\'string\'||orbit.length===0){'
    '    orbit=unit.tag'
    '}'
    const realOrbit=getRealOrbit(orbit)
    let level=unit.options.level
    '    ??getLastGlobalOption(\'level\',unit.tag,tagToGlobalOptions)'
    '    ??getLastGlobalOption(\'level\',realOrbit,tagToGlobalOptions)'
    'if(typeof level!==\'number\'||level<=0||level%1!==0){'
    '    level=1'
    '}'
]}
[]
Units with the same real orbit and level will be ordered togather and given the index one by one. The index will be reset by any unit whose real orbit is heading and level is smaller than the level of the units to be indexed.
[]
['Indexes can be accessed in unit compilers and are put into compiled results by unit compilers for '{src index.stdn, a [standard index units]}.]
[]
{h2 [Children]}
'If a unit is not compiled using a unit compiler, then the children of the unit will be compiled to a document fragment which will be appended to the compiled result of the unit. If the tag is in the following list, then the children will be compiled in inline way. Otherwise, the children will be compiled in normal way. Normal way is exactly the way in which a stdn is compiled.'
[]
{dl [
    {dt [Supported html elements with inline children]}
    {dd [a abbr b bdi bdo br cite code data dfn em i kbd mark q rp rt ruby s samp small span strong sub sup time u var wbr audio img track video iframe del ins col colgroup table tbody tfoot thead tr]}
]}
[]
{h3 [Inline Way]}
{class hide, div [{span [
    first line
    second line
]}]}
{two [
    {display [Source]}
    {display [Result]}
    {lang stdn, code [
        '{span ['
        '    first line'
        '    second line'
        ']}'
    ]}
    {lang html, code [
        <div class="st-line"><span class="unit span" id="first-line~4">first line
        second line</span></div>
    ]}
]}
[]
{h3 [Normal Way]}
{class hide, div [{div [
    first line
    second line
]}]}
{two [
    {display [Source]}
    {display [Result]}
    {lang stdn, code [
        '{div ['
        '    first line'
        '    second line'
        ']}'
    ]}
    {lang html, block, code [<div class="st-line"><div class="unit div" id="first-line~6"><div class="st-line">first line</div><div class="st-line">second line</div></div></div>]}
]}
[]